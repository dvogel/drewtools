#!/usr/bin/env python3

import copy
import os
import re
import readline
import shlex
import subprocess
import sys
import threading

from operator import attrgetter
from tempfile import NamedTemporaryFile

g_verbose = False
g_children = []
g_done = threading.Event()

class ChildProcess (object):
    def __init__ (self, cmd, cmd_args, proc, stdout_file, stderr_file):
        self.cmd = cmd
        self.cmd_args = cmd_args
        self.proc = proc
        self.stdout_file = stdout_file
        self.stderr_file = stderr_file

def template_positions (args):
    positions = []
    for (ix, arg) in enumerate(args):
        if arg == "{}":
            positions.append(ix)
    return positions

def run_cmd (cmd, cmd_args, inp):
    global g_children

    cmd_args1 = copy.copy(cmd_args)
    placeholders = template_positions(cmd_args1)
    if len(placeholders) == 0:
        cmd_args1.append(inp)
    else:
        for ix in placeholders:
            cmd_args1[ix] = inp

    print("Running", cmd, *cmd_args1)
    stdout_file = NamedTemporaryFile()
    stderr_file = NamedTemporaryFile()
    proc = subprocess.Popen([cmd] + cmd_args1, stdout=stdout_file, stderr=stderr_file)
    g_children.append(ChildProcess(cmd, cmd_args1, proc, stdout_file, stderr_file))

def reset_display ():
    sys.stderr.write("\033c")
    sys.stderr.flush()
    show_status()

def show_status ():
    global g_children, g_verbose

    print("PID   STATUS      CMD")
    print("=====================")

    for child in g_children:
        if child.proc.returncode is None:
            status = "RUNNING"
        elif child.proc.returncode == 0:
            status = "FINISHED"
        else:
            status = "Err ({err})".format(err=child.proc.returncode)

        if g_verbose:
            cmd = [child.cmd]
            cmd.extend(child.cmd_args)
            cmd = ' '.join(cmd)
        else:
            cmd = child.cmd
        fmtstr = "{pid:5d} {status:>12} {cmd}"
        print(fmtstr.format(pid=child.proc.pid, cmd=cmd, status=status))

    print(str(len(g_children)), "child processes")

def peek_last_lines_pattern (lines=3):
    pattern_text = "(^.*?+$){{{lines}}})\Z".format(lines=lines)
    pattern = re.compile(pattern_text, re.MULTILINE)

def peek_at_process (pid):
    global g_children

    for child in g_children:
        if child.proc.pid == pid:
            if child.proc.returncode is None or child.proc.returncode == 0:
                print("stdout: {}".format(child.stdout_file.name))
                print("stderr: {}".format(child.stderr_file.name))
                cmd = ['tail', '-n', '3', child.stdout_file.name]
                finished = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
                print("---")
                print(finished.stdout.decode('ASCII'))
                print("---")

            return
    print("No such child.")


g_peek_cmd_pattern = re.compile("^peek\s+(\d+)$")
def prompt_loop (prompt, cmd, cmd_args):
    global g_done, g_verbose

    while True:
        try:
            sys.stdout.write("> ")
            inpline = input().strip()
            if inpline == "exit" or inpline == "quit":
                for child in g_children:
                    if child.proc.returncode is None:
                        print("Cannot exit because there are unfinished child processes.")
                        next
                break
            elif inpline == "help" or inpline == "h":
                print(", ".join(sorted([
                    'exit', 'quit', 'peek', 'reset', 'info', 'status', 'verbose',
                ])))
            elif inpline == "info" or inpline == "i":
                print("COMMAND: %s %s" % (cmd, " ".join(cmd_args)))
            elif inpline.startswith("peek"):
                mch = g_peek_cmd_pattern.match(inpline)
                if mch:
                    peek_at_process(int(mch.group(1)))
                else:
                    print("SYNTAX: peek <pid>")
            elif inpline == "reset" or inpline == "r":
                reset_display()
            elif inpline == "status" or inpline == "s":
                show_status()
            elif inpline == "verbose":
                g_verbose = not g_verbose
                print("Verbosity is {}".format("On" if g_verbose else "Off"))
            else:
                run_cmd(cmd, cmd_args, inpline)
        except EOFError:
            break

    g_done.set()

def child_status_pump (done_event):
    loops = 0
    while g_done.is_set() == False:
        for child in g_children:
            if child.proc.returncode is None:
                try:
                    child.proc.communicate(timeout=0.001)
                except subprocess.TimeoutExpired:
                    pass
        done_event.wait(timeout=0.2)

def main (args):
    if len(args) < 1:
        print("Please provide a command to run.")
        return 1
    cmd = args[0]

    if len(args) > 1:
        cmd_args = args[1:]
    else:
        cmd_args = []

    background_pump = threading.Thread(target=child_status_pump, args=(g_done,))
    background_pump.start()
    prompt_loop("> ", cmd, cmd_args)

    background_pump.join()
    print("Bye")
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))

